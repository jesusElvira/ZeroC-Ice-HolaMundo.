// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `BidirAdapter.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Slice = Ice.Slice;

    var Utils = __M.module("Utils");

    Utils.BidirAdapter = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::Utils::BidirAdapter"
        ],
        -1, undefined, undefined, false);

    Utils.BidirAdapterPrx = Slice.defineProxy(Ice.ObjectPrx, Utils.BidirAdapter.ice_staticId, undefined);

    Slice.defineOperations(Utils.BidirAdapter, Utils.BidirAdapterPrx,
    {
        "add": [, , , , , [9], [[9]], , , , ]
    });
    exports.Utils = Utils;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
BidirAdapter = function(local_adapter, remote_adapter) {
    this.local_adapter = local_adapter;
    this.remote_adapter = remote_adapter;

    this.conn = remote_adapter.ice_getCachedConnection();
    this.conn.setAdapter(local_adapter);
};

BidirAdapter.prototype.addWithUUID = function(servant) {
    var prx = this.local_adapter.addWithUUID(servant);
    return this.remote_adapter.add(prx);
};

BidirAdapter.prototype.add = function(servant, oid) {
    var ic = this.local_adapter.getCommunicator();
    var prx = this.local_adapter.add(servant, broker.stringToIdentity(oid));
    return this.remote_adapter.add(prx);
};

BidirAdapter.prototype.getCommunicator = function() {
    return this.local_adapter.getCommunicator();
};

BidirAdapter.prototype.getConnection = function() {
    return this.conn;
};


createBidirAdapter = function(broker, strprx) {
    var retval = new Ice.Promise();

    broker.createObjectAdapter("")
	.then(on_adapter_ready)
	.exception(function(ex) { retval.fail(ex); });

    var adapter;
    function on_adapter_ready(adapter_) {
	adapter = adapter_;

	var remote_adapter = broker.stringToProxy(strprx);
	return Utils.BidirAdapterPrx.checkedCast(remote_adapter)
	    .then(on_remote_adapter_prx_ready);
    };

    function on_remote_adapter_prx_ready(remote_adapter) {
	var remote_adapter = new BidirAdapter(adapter, remote_adapter);
	return retval.succeed(remote_adapter);
    };

    return retval;
};
